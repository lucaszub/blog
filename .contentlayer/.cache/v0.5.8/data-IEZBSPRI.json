{
  "cacheItemsMap": {
    "azure-key-vault-securite-cloud.md": {
      "document": {
        "title": "Azure Key Vault : sécuriser vos secrets dans le cloud",
        "date": "2025-08-29T00:00:00.000Z",
        "excerpt": "Comprendre, évaluer et intégrer Azure Key Vault pour protéger secrets, clés et certificats. Cas d’usage, intégrations, gouvernance et erreurs à éviter.",
        "category": [
          "Azure",
          "Sécurité",
          "Cloud"
        ],
        "readTime": "6 min",
        "image": "/Azure Key vault.png",
        "faq": [
          {
            "question": "Quelle est la différence entre Azure Key Vault Standard et Premium ?",
            "answer": "Key Vault Standard utilise des clés protégées par logiciel, tandis que Premium offre des clés protégées par HSM (Hardware Security Module) pour une sécurité renforcée. Premium est recommandé pour les environnements critiques."
          },
          {
            "question": "Comment gérer les permissions d'accès dans Key Vault ?",
            "answer": "Utilisez Azure RBAC (Role-Based Access Control) ou les politiques d'accès Key Vault. RBAC est plus moderne et offre une gestion granulaire des permissions avec intégration Azure AD."
          },
          {
            "question": "Key Vault peut-il être utilisé avec des applications on-premise ?",
            "answer": "Oui, via une connexion VPN ou ExpressRoute vers Azure. Vous pouvez aussi utiliser Azure Arc pour gérer des ressources hybrides et accéder à Key Vault de manière sécurisée."
          },
          {
            "question": "Comment automatiser la rotation des secrets ?",
            "answer": "Utilisez les fonctions de rotation automatique d'Azure Key Vault avec Azure Functions ou Logic Apps. Configurez des alertes pour surveiller l'expiration des certificats et secrets."
          },
          {
            "question": "Quels sont les coûts associés à Azure Key Vault ?",
            "answer": "Key Vault facture par opération (GET, PUT, DELETE) et par type de clé stockée. Le coût est généralement faible, environ 0,03€ pour 10 000 opérations. Les clés HSM Premium sont plus coûteuses."
          }
        ],
        "body": {
          "raw": "\n## Introduction\n\nLes fuites de secrets coûtent cher, abîment la confiance et freinent les projets. Centraliser, contrôler et tracer l’accès aux secrets et clés devient un réflexe de base dans un SI distribué. Azure Key Vault répond précisément à ce besoin en offrant un service managé pour stocker et gérer secrets, clés cryptographiques et certificats de manière sécurisée.\n\n## Définition et valeur métier\n\nAzure Key Vault est un service cloud qui centralise le stockage des secrets (mots de passe, chaînes de connexion, clés API), la gestion des clés (génération, rotation, usage cryptographique) et des certificats, avec journalisation et contrôles d’accès intégrés via Microsoft Entra ID. Il propose des conteneurs de type “coffres” et “pools HSM managés” selon le niveau de protection requis.  \nEn clair : moins de secrets dans le code, des accès finement gouvernés, et un audit continu conforme aux exigences de sécurité et de conformité.\n\n## Capacités clés et architecture d’accès\n\n- **Secrets, clés, certificats** : stockage versionné des secrets, gestion du cycle de vie des clés (RSA/EC) et automatisation du renouvellement des certificats ; le tout avec traçabilité des opérations.\n- **Contrôles d’accès et identité** : intégration native avec Microsoft Entra ID, modèles RBAC et plans “contrôle” vs “données” pour séparer la gouvernance du runtime applicatif.\n- **Authentification d’application** : recommandation d’utiliser les identités managées plutôt que des secrets statiques pour éviter de gérer le “premier secret” et faciliter la rotation automatique. Azure Key Vault chiffre aussi les données en transit via TLS.\n- **Résilience sécurité** : suppression douce et protection contre la purge pour éviter pertes accidentelles ou malveillantes, avec audit détaillé des accès.\n\n## Intégrations et patterns d’architecture\n\n- **App Service & Functions** : références Key Vault directement en configuration d’application ; identité managée pour récupérer les secrets sans exposition.\n- **AKS (Kubernetes)** : ingestion sécurisée des secrets dans les pods via opérateurs/CSI pour limiter l’exposition en clair.\n- **CI/CD (Azure DevOps)** : injection de secrets en pipeline pour signer, déployer et configurer sans les stocker en clair.\n- **IaaS & data services** : intégrations avec VM, Disk Encryption, Databricks et services de données Azure pour un chiffrement au repos contrôlé par le client.\n\n## Gouvernance et bonnes pratiques\n\n- **Segmentation** : un coffre par environnement/domaine fonctionnel.\n- **Moindre privilège** : rôles et permissions minimales, revues périodiques.\n- **Rotation et expiration** : politiques adaptées au cycle de vie applicatif.\n- **Nomenclature claire** : préfixes/patterns (`produit-contexte-env`) pour filtrage, audit, automatisation.\n- **Journalisation active** : logs et alertes intégrés à la supervision (SIEM).\n- **Automatisation** : déploiement infra-as-code (ARM/Bicep/Terraform).\n\n## Erreurs fréquentes à éviter\n\n- **Tout centraliser dans un seul coffre** : multipliez-les par produit ou environnement.\n- **Droits globaux et permanents** : interdisez-les, imposez des expirations.\n- **Secrets statiques cachés** : remplacez par identités managées avec rotation.\n- **Pas d’audit/action** : un log non exploité ne sert pas en incident.\n- **Noms opaques** : chaque secret doit indiquer usage, portée, propriétaire.\n\n## Guide de décision rapide\n\n- **À adopter si** :\n\n  - Besoin de conformité et audit des accès\n  - Secrets changeants sur plusieurs apps/équipes\n  - Environnement Azure avec intégrations natives\n\n- **Points d’attention** :\n  - Compatibilité hors Azure via API/SDK\n  - Gouvernance et modèles d’accès clairs\n  - Latence éventuelle pour applications hors Azure\n\n## Checklist opérationnelle\n\n- Cartographier secrets/clés/certificats\n- Définir RBAC et identités managées\n- Mettre en place politiques de rotation/expiration\n- Activer logs/alertes reliés au SIEM\n- Automatiser via IaC\n- Revoir accès et nettoyer régulièrement\n",
          "html": "<h2>Introduction</h2>\n<p>Les fuites de secrets coûtent cher, abîment la confiance et freinent les projets. Centraliser, contrôler et tracer l’accès aux secrets et clés devient un réflexe de base dans un SI distribué. Azure Key Vault répond précisément à ce besoin en offrant un service managé pour stocker et gérer secrets, clés cryptographiques et certificats de manière sécurisée.</p>\n<h2>Définition et valeur métier</h2>\n<p>Azure Key Vault est un service cloud qui centralise le stockage des secrets (mots de passe, chaînes de connexion, clés API), la gestion des clés (génération, rotation, usage cryptographique) et des certificats, avec journalisation et contrôles d’accès intégrés via Microsoft Entra ID. Il propose des conteneurs de type “coffres” et “pools HSM managés” selon le niveau de protection requis.<br>\nEn clair : moins de secrets dans le code, des accès finement gouvernés, et un audit continu conforme aux exigences de sécurité et de conformité.</p>\n<h2>Capacités clés et architecture d’accès</h2>\n<ul>\n<li><strong>Secrets, clés, certificats</strong> : stockage versionné des secrets, gestion du cycle de vie des clés (RSA/EC) et automatisation du renouvellement des certificats ; le tout avec traçabilité des opérations.</li>\n<li><strong>Contrôles d’accès et identité</strong> : intégration native avec Microsoft Entra ID, modèles RBAC et plans “contrôle” vs “données” pour séparer la gouvernance du runtime applicatif.</li>\n<li><strong>Authentification d’application</strong> : recommandation d’utiliser les identités managées plutôt que des secrets statiques pour éviter de gérer le “premier secret” et faciliter la rotation automatique. Azure Key Vault chiffre aussi les données en transit via TLS.</li>\n<li><strong>Résilience sécurité</strong> : suppression douce et protection contre la purge pour éviter pertes accidentelles ou malveillantes, avec audit détaillé des accès.</li>\n</ul>\n<h2>Intégrations et patterns d’architecture</h2>\n<ul>\n<li><strong>App Service &#x26; Functions</strong> : références Key Vault directement en configuration d’application ; identité managée pour récupérer les secrets sans exposition.</li>\n<li><strong>AKS (Kubernetes)</strong> : ingestion sécurisée des secrets dans les pods via opérateurs/CSI pour limiter l’exposition en clair.</li>\n<li><strong>CI/CD (Azure DevOps)</strong> : injection de secrets en pipeline pour signer, déployer et configurer sans les stocker en clair.</li>\n<li><strong>IaaS &#x26; data services</strong> : intégrations avec VM, Disk Encryption, Databricks et services de données Azure pour un chiffrement au repos contrôlé par le client.</li>\n</ul>\n<h2>Gouvernance et bonnes pratiques</h2>\n<ul>\n<li><strong>Segmentation</strong> : un coffre par environnement/domaine fonctionnel.</li>\n<li><strong>Moindre privilège</strong> : rôles et permissions minimales, revues périodiques.</li>\n<li><strong>Rotation et expiration</strong> : politiques adaptées au cycle de vie applicatif.</li>\n<li><strong>Nomenclature claire</strong> : préfixes/patterns (<code>produit-contexte-env</code>) pour filtrage, audit, automatisation.</li>\n<li><strong>Journalisation active</strong> : logs et alertes intégrés à la supervision (SIEM).</li>\n<li><strong>Automatisation</strong> : déploiement infra-as-code (ARM/Bicep/Terraform).</li>\n</ul>\n<h2>Erreurs fréquentes à éviter</h2>\n<ul>\n<li><strong>Tout centraliser dans un seul coffre</strong> : multipliez-les par produit ou environnement.</li>\n<li><strong>Droits globaux et permanents</strong> : interdisez-les, imposez des expirations.</li>\n<li><strong>Secrets statiques cachés</strong> : remplacez par identités managées avec rotation.</li>\n<li><strong>Pas d’audit/action</strong> : un log non exploité ne sert pas en incident.</li>\n<li><strong>Noms opaques</strong> : chaque secret doit indiquer usage, portée, propriétaire.</li>\n</ul>\n<h2>Guide de décision rapide</h2>\n<ul>\n<li>\n<p><strong>À adopter si</strong> :</p>\n<ul>\n<li>Besoin de conformité et audit des accès</li>\n<li>Secrets changeants sur plusieurs apps/équipes</li>\n<li>Environnement Azure avec intégrations natives</li>\n</ul>\n</li>\n<li>\n<p><strong>Points d’attention</strong> :</p>\n<ul>\n<li>Compatibilité hors Azure via API/SDK</li>\n<li>Gouvernance et modèles d’accès clairs</li>\n<li>Latence éventuelle pour applications hors Azure</li>\n</ul>\n</li>\n</ul>\n<h2>Checklist opérationnelle</h2>\n<ul>\n<li>Cartographier secrets/clés/certificats</li>\n<li>Définir RBAC et identités managées</li>\n<li>Mettre en place politiques de rotation/expiration</li>\n<li>Activer logs/alertes reliés au SIEM</li>\n<li>Automatiser via IaC</li>\n<li>Revoir accès et nettoyer régulièrement</li>\n</ul>"
        },
        "_id": "azure-key-vault-securite-cloud.md",
        "_raw": {
          "sourceFilePath": "azure-key-vault-securite-cloud.md",
          "sourceFileName": "azure-key-vault-securite-cloud.md",
          "sourceFileDir": ".",
          "contentType": "markdown",
          "flattenedPath": "azure-key-vault-securite-cloud"
        },
        "type": "Post",
        "url": "/blog/azure-key-vault-securite-cloud"
      },
      "documentHash": "1756490947591",
      "hasWarnings": false,
      "documentTypeName": "Post"
    },
    "fastapi-deploiement-azure.md": {
      "document": {
        "title": "Déployer une application FastAPI sur Azure Web App avec Azure CLI, Docker et GitHub Actions",
        "date": "2025-08-29T00:00:00.000Z",
        "excerpt": "Tutoriel complet pour déployer une application FastAPI sur Azure Web app en utilisant Docker, Azure Container Registry et un pipeline CI/CD GitHub Actions.",
        "category": [
          "FastAPI",
          "Azure",
          "GitHub Actions",
          "CI/CD"
        ],
        "readTime": "8 min",
        "image": "https://images.unsplash.com/photo-1525547719571-a2d4ac8945e2?q=80&w=928&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
        "faq": [
          {
            "question": "Quelle est la différence entre Azure Container Registry et Docker Hub ?",
            "answer": "Azure Container Registry (ACR) est intégré à l'écosystème Azure, offre une sécurité renforcée avec Azure AD, et permet une mise en réseau privée. Docker Hub est public par défaut et moins intégré aux services cloud Azure."
          },
          {
            "question": "Pourquoi utiliser Azure Web App plutôt qu'Azure Container Instances ?",
            "answer": "Azure Web App offre des fonctionnalités avancées comme la mise à l'échelle automatique, les slots de déploiement, l'intégration CI/CD native, et la gestion des domaines personnalisés. ACI est plus adapté aux tâches ponctuelles."
          },
          {
            "question": "Comment gérer les variables d'environnement sensibles ?",
            "answer": "Utilisez Azure Key Vault pour stocker les secrets, puis configurez les références Key Vault dans les paramètres d'application d'Azure Web App. Évitez de mettre les secrets directement dans le code ou les variables d'environnement."
          },
          {
            "question": "Le déploiement GitHub Actions est-il sécurisé ?",
            "answer": "Oui, en utilisant un service principal Azure avec des permissions minimales et en stockant les credentials dans les secrets GitHub. Le service principal peut être configuré avec des rôles spécifiques au groupe de ressources."
          },
          {
            "question": "Comment optimiser les coûts de déploiement ?",
            "answer": "Utilisez le SKU Basic pour ACR en développement, configurez l'auto-scaling sur Azure Web App, et nettoyez régulièrement les anciennes images dans ACR. Surveillez les métriques avec Azure Monitor."
          }
        ],
        "body": {
          "raw": "\nDans ce tutoriel, nous allons déployer une application **FastAPI** sur **[Microsoft Azure](https://azure.microsoft.com/fr-fr/)** en utilisant **[Docker](https://www.docker.com/)** pour la containerisation, **[Azure Container Registry (ACR)](https://learn.microsoft.com/fr-fr/azure/container-registry/)** pour stocker l’image, et **[Azure Web App](https://learn.microsoft.com/fr-fr/azure/app-service/)** pour l’hébergement.\n\nLe déploiement sera automatisé grâce à **[GitHub Actions](https://docs.github.com/fr/actions)** pour mettre en place un pipeline CI/CD complet.\n\n## Prérequis\n\nAvant de commencer, vous devez avoir :\n\n- Un **[compte Azure actif](https://azure.microsoft.com/fr-fr/free/)**\n- **[Docker installé](https://docs.docker.com/get-docker/)** sur votre machine\n- **[Azure CLI](https://learn.microsoft.com/fr-fr/cli/azure/install-azure-cli)** pour interagir avec Azure\n- Un **compte GitHub** avec **Actions** activées\n\n## 🛠 1. Créer les ressources Azure via Azure CLI\n\n### 🔹 1.1 Créer un groupe de ressources\n\n```bash\naz login\naz group create --name myResourceGroup --location francecentral\n```\n\n### 🔹 1.2 Créer un Azure Container Registry (ACR)\n\n```bash\naz acr create --resource-group myResourceGroup --name weatherapplucasz --sku Basic\n```\n\n**Pour en savoir plus** : [Documentation officielle ACR](https://learn.microsoft.com/fr-fr/azure/container-registry/container-registry-intro)\n\n### 🔹 1.3 Créer une Azure Web App\n\n```bash\naz appservice plan create --name myAppServicePlan \\\n  --resource-group myResourceGroup --sku B1 --is-linux\n\naz webapp create --name weatherapp \\\n  --resource-group myResourceGroup \\\n  --plan myAppServicePlan \\\n  --deployment-container-image-name weatherapplucasz.azurecr.io/weatherapp:latest\n```\n\n## 2. Configurer Azure Web App pour pointer vers l'image du container\n\n1. Connectez-vous au **[Portail Azure](https://portal.azure.com)**\n2. Ouvrez **App Services** et sélectionnez `weatherapp`\n3. Accédez à **Configuration** → **Container settings**\n4. Sélectionnez votre ACR (`weatherapplucasz.azurecr.io`)\n5. Choisissez l’image `weatherapp:latest`\n\n![Configuration Azure Web App](/azure-web-app.png)\n\n## 3. Créer les identifiants Azure pour GitHub Actions\n\n```bash\naz ad sp create-for-rbac --name \"github-action-deploy\" \\\n  --role contributor \\\n  --scopes /subscriptions/<subscription-id>/resourceGroups/myResourceGroup \\\n  --sdk-auth\n```\n\n📚 **Référence** : [Créer un principal de service Azure](https://learn.microsoft.com/fr-fr/cli/azure/create-an-azure-service-principal-azure-cli)\n\n## 4. Ajouter les identifiants dans les secrets GitHub\n\n1. Ouvrez **Settings** → **Secrets and variables** → **Actions**\n2. Cliquez sur **New repository secret**\n3. Nom : `AZURE_CREDENTIALS`\n4. Valeur : collez le JSON généré\n\n## 🤖 5. Pipeline CI/CD avec GitHub Actions\n\nCréez le fichier `.github/workflows/deploy.yml` :\n\n```yaml\nname: CI/CD Pipeline for FastAPI App\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build_and_push:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n\n      - name: Log in to Azure CLI\n        uses: azure/login@v1\n        with:\n          creds: ${{ secrets.AZURE_CREDENTIALS }}\n\n      - name: Log in to ACR\n        run: az acr login --name weatherapplucasz\n\n      - name: Build Docker image\n        run: docker build -t weatherapplucasz.azurecr.io/weatherapp:latest .\n\n      - name: Push Docker image to ACR\n        run: docker push weatherapplucasz.azurecr.io/weatherapp:latest\n\n      - name: Deploy to Azure Web App\n        uses: azure/webapps-deploy@v2\n        with:\n          app-name: weatherapp\n          images: weatherapplucasz.azurecr.io/weatherapp:latest\n```\n\n**Guide complet GitHub Actions + Azure** : [Documentation Microsoft](https://learn.microsoft.com/fr-fr/azure/app-service/deploy-github-actions)\n\n## 📘 Explication du pipeline\n\n- **Checkout** : Récupère le code source depuis GitHub\n- **Docker Buildx** : Prépare la construction d’images multi-architecture\n- **Azure Login** : Authentifie le pipeline sur Azure\n- **ACR Login** : Se connecte au registre pour push/pull\n- **Docker Build** : Construit l’image de l’application FastAPI\n- **Docker Push** : Envoie l’image dans ACR\n- **Deploy** : Met à jour Azure Web App avec la dernière image\n\n## Conclusion\n\nGrâce à ce tutoriel, vous pouvez :\n\n- Containeriser votre app **FastAPI** avec Docker\n- La stocker dans **Azure Container Registry**\n- La déployer sur **Azure Web App**\n- Automatiser le tout avec **GitHub Actions**\n\n  **Pour aller plus loin** :\n\n- [FastAPI Documentation](https://fastapi.tiangolo.com/)\n- [Azure Key Vault](https://learn.microsoft.com/fr-fr/azure/key-vault/general/overview) pour sécuriser vos secrets\n- [Application Insights](https://learn.microsoft.com/fr-fr/azure/azure-monitor/app/app-insights-overview) pour surveiller vos performances\n",
          "html": "<p>Dans ce tutoriel, nous allons déployer une application <strong>FastAPI</strong> sur <strong><a href=\"https://azure.microsoft.com/fr-fr/\">Microsoft Azure</a></strong> en utilisant <strong><a href=\"https://www.docker.com/\">Docker</a></strong> pour la containerisation, <strong><a href=\"https://learn.microsoft.com/fr-fr/azure/container-registry/\">Azure Container Registry (ACR)</a></strong> pour stocker l’image, et <strong><a href=\"https://learn.microsoft.com/fr-fr/azure/app-service/\">Azure Web App</a></strong> pour l’hébergement.</p>\n<p>Le déploiement sera automatisé grâce à <strong><a href=\"https://docs.github.com/fr/actions\">GitHub Actions</a></strong> pour mettre en place un pipeline CI/CD complet.</p>\n<h2>Prérequis</h2>\n<p>Avant de commencer, vous devez avoir :</p>\n<ul>\n<li>Un <strong><a href=\"https://azure.microsoft.com/fr-fr/free/\">compte Azure actif</a></strong></li>\n<li><strong><a href=\"https://docs.docker.com/get-docker/\">Docker installé</a></strong> sur votre machine</li>\n<li><strong><a href=\"https://learn.microsoft.com/fr-fr/cli/azure/install-azure-cli\">Azure CLI</a></strong> pour interagir avec Azure</li>\n<li>Un <strong>compte GitHub</strong> avec <strong>Actions</strong> activées</li>\n</ul>\n<h2>🛠 1. Créer les ressources Azure via Azure CLI</h2>\n<h3>🔹 1.1 Créer un groupe de ressources</h3>\n<pre><code class=\"language-bash\">az login\naz group create --name myResourceGroup --location francecentral\n</code></pre>\n<h3>🔹 1.2 Créer un Azure Container Registry (ACR)</h3>\n<pre><code class=\"language-bash\">az acr create --resource-group myResourceGroup --name weatherapplucasz --sku Basic\n</code></pre>\n<p><strong>Pour en savoir plus</strong> : <a href=\"https://learn.microsoft.com/fr-fr/azure/container-registry/container-registry-intro\">Documentation officielle ACR</a></p>\n<h3>🔹 1.3 Créer une Azure Web App</h3>\n<pre><code class=\"language-bash\">az appservice plan create --name myAppServicePlan \\\n  --resource-group myResourceGroup --sku B1 --is-linux\n\naz webapp create --name weatherapp \\\n  --resource-group myResourceGroup \\\n  --plan myAppServicePlan \\\n  --deployment-container-image-name weatherapplucasz.azurecr.io/weatherapp:latest\n</code></pre>\n<h2>2. Configurer Azure Web App pour pointer vers l'image du container</h2>\n<ol>\n<li>Connectez-vous au <strong><a href=\"https://portal.azure.com\">Portail Azure</a></strong></li>\n<li>Ouvrez <strong>App Services</strong> et sélectionnez <code>weatherapp</code></li>\n<li>Accédez à <strong>Configuration</strong> → <strong>Container settings</strong></li>\n<li>Sélectionnez votre ACR (<code>weatherapplucasz.azurecr.io</code>)</li>\n<li>Choisissez l’image <code>weatherapp:latest</code></li>\n</ol>\n<p><img src=\"/azure-web-app.png\" alt=\"Configuration Azure Web App\"></p>\n<h2>3. Créer les identifiants Azure pour GitHub Actions</h2>\n<pre><code class=\"language-bash\">az ad sp create-for-rbac --name \"github-action-deploy\" \\\n  --role contributor \\\n  --scopes /subscriptions/&#x3C;subscription-id>/resourceGroups/myResourceGroup \\\n  --sdk-auth\n</code></pre>\n<p>📚 <strong>Référence</strong> : <a href=\"https://learn.microsoft.com/fr-fr/cli/azure/create-an-azure-service-principal-azure-cli\">Créer un principal de service Azure</a></p>\n<h2>4. Ajouter les identifiants dans les secrets GitHub</h2>\n<ol>\n<li>Ouvrez <strong>Settings</strong> → <strong>Secrets and variables</strong> → <strong>Actions</strong></li>\n<li>Cliquez sur <strong>New repository secret</strong></li>\n<li>Nom : <code>AZURE_CREDENTIALS</code></li>\n<li>Valeur : collez le JSON généré</li>\n</ol>\n<h2>🤖 5. Pipeline CI/CD avec GitHub Actions</h2>\n<p>Créez le fichier <code>.github/workflows/deploy.yml</code> :</p>\n<pre><code class=\"language-yaml\">name: CI/CD Pipeline for FastAPI App\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build_and_push:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n\n      - name: Log in to Azure CLI\n        uses: azure/login@v1\n        with:\n          creds: ${{ secrets.AZURE_CREDENTIALS }}\n\n      - name: Log in to ACR\n        run: az acr login --name weatherapplucasz\n\n      - name: Build Docker image\n        run: docker build -t weatherapplucasz.azurecr.io/weatherapp:latest .\n\n      - name: Push Docker image to ACR\n        run: docker push weatherapplucasz.azurecr.io/weatherapp:latest\n\n      - name: Deploy to Azure Web App\n        uses: azure/webapps-deploy@v2\n        with:\n          app-name: weatherapp\n          images: weatherapplucasz.azurecr.io/weatherapp:latest\n</code></pre>\n<p><strong>Guide complet GitHub Actions + Azure</strong> : <a href=\"https://learn.microsoft.com/fr-fr/azure/app-service/deploy-github-actions\">Documentation Microsoft</a></p>\n<h2>📘 Explication du pipeline</h2>\n<ul>\n<li><strong>Checkout</strong> : Récupère le code source depuis GitHub</li>\n<li><strong>Docker Buildx</strong> : Prépare la construction d’images multi-architecture</li>\n<li><strong>Azure Login</strong> : Authentifie le pipeline sur Azure</li>\n<li><strong>ACR Login</strong> : Se connecte au registre pour push/pull</li>\n<li><strong>Docker Build</strong> : Construit l’image de l’application FastAPI</li>\n<li><strong>Docker Push</strong> : Envoie l’image dans ACR</li>\n<li><strong>Deploy</strong> : Met à jour Azure Web App avec la dernière image</li>\n</ul>\n<h2>Conclusion</h2>\n<p>Grâce à ce tutoriel, vous pouvez :</p>\n<ul>\n<li>\n<p>Containeriser votre app <strong>FastAPI</strong> avec Docker</p>\n</li>\n<li>\n<p>La stocker dans <strong>Azure Container Registry</strong></p>\n</li>\n<li>\n<p>La déployer sur <strong>Azure Web App</strong></p>\n</li>\n<li>\n<p>Automatiser le tout avec <strong>GitHub Actions</strong></p>\n<p><strong>Pour aller plus loin</strong> :</p>\n</li>\n<li>\n<p><a href=\"https://fastapi.tiangolo.com/\">FastAPI Documentation</a></p>\n</li>\n<li>\n<p><a href=\"https://learn.microsoft.com/fr-fr/azure/key-vault/general/overview\">Azure Key Vault</a> pour sécuriser vos secrets</p>\n</li>\n<li>\n<p><a href=\"https://learn.microsoft.com/fr-fr/azure/azure-monitor/app/app-insights-overview\">Application Insights</a> pour surveiller vos performances</p>\n</li>\n</ul>"
        },
        "_id": "fastapi-deploiement-azure.md",
        "_raw": {
          "sourceFilePath": "fastapi-deploiement-azure.md",
          "sourceFileName": "fastapi-deploiement-azure.md",
          "sourceFileDir": ".",
          "contentType": "markdown",
          "flattenedPath": "fastapi-deploiement-azure"
        },
        "type": "Post",
        "url": "/blog/fastapi-deploiement-azure"
      },
      "documentHash": "1756490761937",
      "hasWarnings": false,
      "documentTypeName": "Post"
    }
  }
}
