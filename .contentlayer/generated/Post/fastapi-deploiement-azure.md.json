{
  "title": "D√©ployer une application FastAPI sur Azure Web App avec Azure CLI, Docker et GitHub Actions",
  "date": "2025-08-29T00:00:00.000Z",
  "excerpt": "Tutoriel complet pour d√©ployer une application FastAPI sur Azure Web app en utilisant Docker, Azure Container Registry et un pipeline CI/CD GitHub Actions.",
  "category": [
    "FastAPI",
    "Azure",
    "GitHub Actions",
    "CI/CD"
  ],
  "readTime": "8 min",
  "image": "https://images.unsplash.com/photo-1525547719571-a2d4ac8945e2?q=80&w=928&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
  "faq": [
    {
      "question": "Quelle est la diff√©rence entre Azure Container Registry et Docker Hub ?",
      "answer": "Azure Container Registry (ACR) est int√©gr√© √† l'√©cosyst√®me Azure, offre une s√©curit√© renforc√©e avec Azure AD, et permet une mise en r√©seau priv√©e. Docker Hub est public par d√©faut et moins int√©gr√© aux services cloud Azure."
    },
    {
      "question": "Pourquoi utiliser Azure Web App plut√¥t qu'Azure Container Instances ?",
      "answer": "Azure Web App offre des fonctionnalit√©s avanc√©es comme la mise √† l'√©chelle automatique, les slots de d√©ploiement, l'int√©gration CI/CD native, et la gestion des domaines personnalis√©s. ACI est plus adapt√© aux t√¢ches ponctuelles."
    },
    {
      "question": "Comment g√©rer les variables d'environnement sensibles ?",
      "answer": "Utilisez Azure Key Vault pour stocker les secrets, puis configurez les r√©f√©rences Key Vault dans les param√®tres d'application d'Azure Web App. √âvitez de mettre les secrets directement dans le code ou les variables d'environnement."
    },
    {
      "question": "Le d√©ploiement GitHub Actions est-il s√©curis√© ?",
      "answer": "Oui, en utilisant un service principal Azure avec des permissions minimales et en stockant les credentials dans les secrets GitHub. Le service principal peut √™tre configur√© avec des r√¥les sp√©cifiques au groupe de ressources."
    },
    {
      "question": "Comment optimiser les co√ªts de d√©ploiement ?",
      "answer": "Utilisez le SKU Basic pour ACR en d√©veloppement, configurez l'auto-scaling sur Azure Web App, et nettoyez r√©guli√®rement les anciennes images dans ACR. Surveillez les m√©triques avec Azure Monitor."
    }
  ],
  "body": {
    "raw": "\nDans ce tutoriel, nous allons d√©ployer une application **FastAPI** sur **[Microsoft Azure](https://azure.microsoft.com/fr-fr/)** en utilisant **[Docker](https://www.docker.com/)** pour la containerisation, **[Azure Container Registry (ACR)](https://learn.microsoft.com/fr-fr/azure/container-registry/)** pour stocker l‚Äôimage, et **[Azure Web App](https://learn.microsoft.com/fr-fr/azure/app-service/)** pour l‚Äôh√©bergement.\n\nLe d√©ploiement sera automatis√© gr√¢ce √† **[GitHub Actions](https://docs.github.com/fr/actions)** pour mettre en place un pipeline CI/CD complet.\n\n## Pr√©requis\n\nAvant de commencer, vous devez avoir :\n\n- Un **[compte Azure actif](https://azure.microsoft.com/fr-fr/free/)**\n- **[Docker install√©](https://docs.docker.com/get-docker/)** sur votre machine\n- **[Azure CLI](https://learn.microsoft.com/fr-fr/cli/azure/install-azure-cli)** pour interagir avec Azure\n- Un **compte GitHub** avec **Actions** activ√©es\n\n## üõ† 1. Cr√©er les ressources Azure via Azure CLI\n\n### üîπ 1.1 Cr√©er un groupe de ressources\n\n```bash\naz login\naz group create --name myResourceGroup --location francecentral\n```\n\n### üîπ 1.2 Cr√©er un Azure Container Registry (ACR)\n\n```bash\naz acr create --resource-group myResourceGroup --name weatherapplucasz --sku Basic\n```\n\n**Pour en savoir plus** : [Documentation officielle ACR](https://learn.microsoft.com/fr-fr/azure/container-registry/container-registry-intro)\n\n### üîπ 1.3 Cr√©er une Azure Web App\n\n```bash\naz appservice plan create --name myAppServicePlan \\\n  --resource-group myResourceGroup --sku B1 --is-linux\n\naz webapp create --name weatherapp \\\n  --resource-group myResourceGroup \\\n  --plan myAppServicePlan \\\n  --deployment-container-image-name weatherapplucasz.azurecr.io/weatherapp:latest\n```\n\n## 2. Configurer Azure Web App pour pointer vers l'image du container\n\n1. Connectez-vous au **[Portail Azure](https://portal.azure.com)**\n2. Ouvrez **App Services** et s√©lectionnez `weatherapp`\n3. Acc√©dez √† **Configuration** ‚Üí **Container settings**\n4. S√©lectionnez votre ACR (`weatherapplucasz.azurecr.io`)\n5. Choisissez l‚Äôimage `weatherapp:latest`\n\n![Configuration Azure Web App](/azure-web-app.png)\n\n## 3. Cr√©er les identifiants Azure pour GitHub Actions\n\n```bash\naz ad sp create-for-rbac --name \"github-action-deploy\" \\\n  --role contributor \\\n  --scopes /subscriptions/<subscription-id>/resourceGroups/myResourceGroup \\\n  --sdk-auth\n```\n\nüìö **R√©f√©rence** : [Cr√©er un principal de service Azure](https://learn.microsoft.com/fr-fr/cli/azure/create-an-azure-service-principal-azure-cli)\n\n## 4. Ajouter les identifiants dans les secrets GitHub\n\n1. Ouvrez **Settings** ‚Üí **Secrets and variables** ‚Üí **Actions**\n2. Cliquez sur **New repository secret**\n3. Nom : `AZURE_CREDENTIALS`\n4. Valeur : collez le JSON g√©n√©r√©\n\n## ü§ñ 5. Pipeline CI/CD avec GitHub Actions\n\nCr√©ez le fichier `.github/workflows/deploy.yml` :\n\n```yaml\nname: CI/CD Pipeline for FastAPI App\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build_and_push:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n\n      - name: Log in to Azure CLI\n        uses: azure/login@v1\n        with:\n          creds: ${{ secrets.AZURE_CREDENTIALS }}\n\n      - name: Log in to ACR\n        run: az acr login --name weatherapplucasz\n\n      - name: Build Docker image\n        run: docker build -t weatherapplucasz.azurecr.io/weatherapp:latest .\n\n      - name: Push Docker image to ACR\n        run: docker push weatherapplucasz.azurecr.io/weatherapp:latest\n\n      - name: Deploy to Azure Web App\n        uses: azure/webapps-deploy@v2\n        with:\n          app-name: weatherapp\n          images: weatherapplucasz.azurecr.io/weatherapp:latest\n```\n\n**Guide complet GitHub Actions + Azure** : [Documentation Microsoft](https://learn.microsoft.com/fr-fr/azure/app-service/deploy-github-actions)\n\n## üìò Explication du pipeline\n\n- **Checkout** : R√©cup√®re le code source depuis GitHub\n- **Docker Buildx** : Pr√©pare la construction d‚Äôimages multi-architecture\n- **Azure Login** : Authentifie le pipeline sur Azure\n- **ACR Login** : Se connecte au registre pour push/pull\n- **Docker Build** : Construit l‚Äôimage de l‚Äôapplication FastAPI\n- **Docker Push** : Envoie l‚Äôimage dans ACR\n- **Deploy** : Met √† jour Azure Web App avec la derni√®re image\n\n## Conclusion\n\nGr√¢ce √† ce tutoriel, vous pouvez :\n\n- Containeriser votre app **FastAPI** avec Docker\n- La stocker dans **Azure Container Registry**\n- La d√©ployer sur **Azure Web App**\n- Automatiser le tout avec **GitHub Actions**\n\n  **Pour aller plus loin** :\n\n- [FastAPI Documentation](https://fastapi.tiangolo.com/)\n- [Azure Key Vault](https://learn.microsoft.com/fr-fr/azure/key-vault/general/overview) pour s√©curiser vos secrets\n- [Application Insights](https://learn.microsoft.com/fr-fr/azure/azure-monitor/app/app-insights-overview) pour surveiller vos performances\n",
    "html": "<p>Dans ce tutoriel, nous allons d√©ployer une application <strong>FastAPI</strong> sur <strong><a href=\"https://azure.microsoft.com/fr-fr/\">Microsoft Azure</a></strong> en utilisant <strong><a href=\"https://www.docker.com/\">Docker</a></strong> pour la containerisation, <strong><a href=\"https://learn.microsoft.com/fr-fr/azure/container-registry/\">Azure Container Registry (ACR)</a></strong> pour stocker l‚Äôimage, et <strong><a href=\"https://learn.microsoft.com/fr-fr/azure/app-service/\">Azure Web App</a></strong> pour l‚Äôh√©bergement.</p>\n<p>Le d√©ploiement sera automatis√© gr√¢ce √† <strong><a href=\"https://docs.github.com/fr/actions\">GitHub Actions</a></strong> pour mettre en place un pipeline CI/CD complet.</p>\n<h2>Pr√©requis</h2>\n<p>Avant de commencer, vous devez avoir :</p>\n<ul>\n<li>Un <strong><a href=\"https://azure.microsoft.com/fr-fr/free/\">compte Azure actif</a></strong></li>\n<li><strong><a href=\"https://docs.docker.com/get-docker/\">Docker install√©</a></strong> sur votre machine</li>\n<li><strong><a href=\"https://learn.microsoft.com/fr-fr/cli/azure/install-azure-cli\">Azure CLI</a></strong> pour interagir avec Azure</li>\n<li>Un <strong>compte GitHub</strong> avec <strong>Actions</strong> activ√©es</li>\n</ul>\n<h2>üõ† 1. Cr√©er les ressources Azure via Azure CLI</h2>\n<h3>üîπ 1.1 Cr√©er un groupe de ressources</h3>\n<pre><code class=\"language-bash\">az login\naz group create --name myResourceGroup --location francecentral\n</code></pre>\n<h3>üîπ 1.2 Cr√©er un Azure Container Registry (ACR)</h3>\n<pre><code class=\"language-bash\">az acr create --resource-group myResourceGroup --name weatherapplucasz --sku Basic\n</code></pre>\n<p><strong>Pour en savoir plus</strong> : <a href=\"https://learn.microsoft.com/fr-fr/azure/container-registry/container-registry-intro\">Documentation officielle ACR</a></p>\n<h3>üîπ 1.3 Cr√©er une Azure Web App</h3>\n<pre><code class=\"language-bash\">az appservice plan create --name myAppServicePlan \\\n  --resource-group myResourceGroup --sku B1 --is-linux\n\naz webapp create --name weatherapp \\\n  --resource-group myResourceGroup \\\n  --plan myAppServicePlan \\\n  --deployment-container-image-name weatherapplucasz.azurecr.io/weatherapp:latest\n</code></pre>\n<h2>2. Configurer Azure Web App pour pointer vers l'image du container</h2>\n<ol>\n<li>Connectez-vous au <strong><a href=\"https://portal.azure.com\">Portail Azure</a></strong></li>\n<li>Ouvrez <strong>App Services</strong> et s√©lectionnez <code>weatherapp</code></li>\n<li>Acc√©dez √† <strong>Configuration</strong> ‚Üí <strong>Container settings</strong></li>\n<li>S√©lectionnez votre ACR (<code>weatherapplucasz.azurecr.io</code>)</li>\n<li>Choisissez l‚Äôimage <code>weatherapp:latest</code></li>\n</ol>\n<p><img src=\"/azure-web-app.png\" alt=\"Configuration Azure Web App\"></p>\n<h2>3. Cr√©er les identifiants Azure pour GitHub Actions</h2>\n<pre><code class=\"language-bash\">az ad sp create-for-rbac --name \"github-action-deploy\" \\\n  --role contributor \\\n  --scopes /subscriptions/&#x3C;subscription-id>/resourceGroups/myResourceGroup \\\n  --sdk-auth\n</code></pre>\n<p>üìö <strong>R√©f√©rence</strong> : <a href=\"https://learn.microsoft.com/fr-fr/cli/azure/create-an-azure-service-principal-azure-cli\">Cr√©er un principal de service Azure</a></p>\n<h2>4. Ajouter les identifiants dans les secrets GitHub</h2>\n<ol>\n<li>Ouvrez <strong>Settings</strong> ‚Üí <strong>Secrets and variables</strong> ‚Üí <strong>Actions</strong></li>\n<li>Cliquez sur <strong>New repository secret</strong></li>\n<li>Nom : <code>AZURE_CREDENTIALS</code></li>\n<li>Valeur : collez le JSON g√©n√©r√©</li>\n</ol>\n<h2>ü§ñ 5. Pipeline CI/CD avec GitHub Actions</h2>\n<p>Cr√©ez le fichier <code>.github/workflows/deploy.yml</code> :</p>\n<pre><code class=\"language-yaml\">name: CI/CD Pipeline for FastAPI App\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build_and_push:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n\n      - name: Log in to Azure CLI\n        uses: azure/login@v1\n        with:\n          creds: ${{ secrets.AZURE_CREDENTIALS }}\n\n      - name: Log in to ACR\n        run: az acr login --name weatherapplucasz\n\n      - name: Build Docker image\n        run: docker build -t weatherapplucasz.azurecr.io/weatherapp:latest .\n\n      - name: Push Docker image to ACR\n        run: docker push weatherapplucasz.azurecr.io/weatherapp:latest\n\n      - name: Deploy to Azure Web App\n        uses: azure/webapps-deploy@v2\n        with:\n          app-name: weatherapp\n          images: weatherapplucasz.azurecr.io/weatherapp:latest\n</code></pre>\n<p><strong>Guide complet GitHub Actions + Azure</strong> : <a href=\"https://learn.microsoft.com/fr-fr/azure/app-service/deploy-github-actions\">Documentation Microsoft</a></p>\n<h2>üìò Explication du pipeline</h2>\n<ul>\n<li><strong>Checkout</strong> : R√©cup√®re le code source depuis GitHub</li>\n<li><strong>Docker Buildx</strong> : Pr√©pare la construction d‚Äôimages multi-architecture</li>\n<li><strong>Azure Login</strong> : Authentifie le pipeline sur Azure</li>\n<li><strong>ACR Login</strong> : Se connecte au registre pour push/pull</li>\n<li><strong>Docker Build</strong> : Construit l‚Äôimage de l‚Äôapplication FastAPI</li>\n<li><strong>Docker Push</strong> : Envoie l‚Äôimage dans ACR</li>\n<li><strong>Deploy</strong> : Met √† jour Azure Web App avec la derni√®re image</li>\n</ul>\n<h2>Conclusion</h2>\n<p>Gr√¢ce √† ce tutoriel, vous pouvez :</p>\n<ul>\n<li>\n<p>Containeriser votre app <strong>FastAPI</strong> avec Docker</p>\n</li>\n<li>\n<p>La stocker dans <strong>Azure Container Registry</strong></p>\n</li>\n<li>\n<p>La d√©ployer sur <strong>Azure Web App</strong></p>\n</li>\n<li>\n<p>Automatiser le tout avec <strong>GitHub Actions</strong></p>\n<p><strong>Pour aller plus loin</strong> :</p>\n</li>\n<li>\n<p><a href=\"https://fastapi.tiangolo.com/\">FastAPI Documentation</a></p>\n</li>\n<li>\n<p><a href=\"https://learn.microsoft.com/fr-fr/azure/key-vault/general/overview\">Azure Key Vault</a> pour s√©curiser vos secrets</p>\n</li>\n<li>\n<p><a href=\"https://learn.microsoft.com/fr-fr/azure/azure-monitor/app/app-insights-overview\">Application Insights</a> pour surveiller vos performances</p>\n</li>\n</ul>"
  },
  "_id": "fastapi-deploiement-azure.md",
  "_raw": {
    "sourceFilePath": "fastapi-deploiement-azure.md",
    "sourceFileName": "fastapi-deploiement-azure.md",
    "sourceFileDir": ".",
    "contentType": "markdown",
    "flattenedPath": "fastapi-deploiement-azure"
  },
  "type": "Post",
  "url": "/blog/fastapi-deploiement-azure"
}